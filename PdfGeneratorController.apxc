public with sharing class PdfGeneratorController {

  public ID parentId {get;set;}
  public String pdfName {get;set;}
  
  public PageReference savePdf() {

    PageReference pdf = Page.PdfGeneratorTemplate;
    // add parent id to the parameters for standardcontroller
    pdf.getParameters().put('id',parentId);

    // create the new attachment
    Attachment attach = new Attachment();
    ContentDocument file = new ContentDocument();
    
    // the contents of the attachment from the pdf
    Blob body;
    
    try {
    	
        // returns the output of the page as a PDF
    	body = pdf.getContent();
    	
    // need to pass unit test -- current bug	
    } catch (VisualforceException e) {
    	body = Blob.valueOf('Some Text');
    }
    
    attach.Body = body;
    // add the user entered name
    attach.Name = pdfName;
    attach.IsPrivate = false;
    // attach the pdf to the account
    attach.ParentId = parentId;
    insert attach;
    
  //Sudhanshu
  //
  	ContentVersion conVer = new ContentVersion();
	conVer.ContentLocation = 'S'; // to use S specify this document is in Salesforce, to use E for external files
	conVer.PathOnClient = 'testing.pdf'; // The files name, extension is very important here which will help the file in preview.
	conVer.Title = 'Testing File'; // Display name of the files
	conVer.VersionData = body; // converting your binary string to Blog
	insert conVer;    //Insert ContentVersion
     
    Id conDoc = [SELECT ContentDocumentId FROM ContentVersion WHERE Id =:conVer.Id].ContentDocumentId;
	//create ContentDocumentLink  record 
	ContentDocumentLink conDocLink = New ContentDocumentLink();
	conDocLink.LinkedEntityId = parentId; // Specify RECORD ID here i.e Any Object ID (Standard Object/Custom Object)
	conDocLink.ContentDocumentId = conDoc;  //ContentDocumentId Id from ContentVersion
	conDocLink.shareType = 'V';
	insert conDocLink;
    
    
    // send the user to the account to view results
    return new PageReference('/'+parentId);

  }

}
